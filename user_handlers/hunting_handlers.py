import random
import sqlite3
from datetime import date
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery
from FSM import FSMPokemon
from keyboard.keyboards import create_inline_kb
from services.services import get_description, get_pokemon_for_hunting, get_characteristic_for_fight, get_fight, \
    take_pokemon, access_to_hunting, enhance_pokemon, get_text_for_fight
from lexicon.lexicon import LEXICON

base = sqlite3.connect('Pokemon.db')
cur = base.cursor()
names_pokemons = [i[0] for i in cur.execute('SELECT Name FROM Pokemons').fetchall()]
base.close()


async def start_hunting(callback: CallbackQuery, state: FSMContext):
    user_date = callback.message.date.date().strftime('%d.%m.%Y')
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        if cur.execute(f'SELECT date_hunting FROM Users WHERE id = {callback.from_user.id}').fetchone()[0] != user_date:
            cur.execute(
                f'UPDATE Users SET date_hunting = "{user_date}", hunting_attempts = 10 WHERE id = {callback.from_user.id}')
            base.commit()

    await callback.message.edit_text(f'{LEXICON["start_hunting"]}',
                                     reply_markup=create_inline_kb(1, '–ù–∞—á–∞—Ç—å –æ—Ö–æ—Ç—É', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def select_pokemons_for_hunting(callback: CallbackQuery, state: FSMContext):
    await FSMPokemon.hunting.set()
    await callback.answer()
    if access_to_hunting(callback.from_user.id):
        async with state.proxy() as data:
            data['pokemon'] = get_pokemon_for_hunting()
            image, description = get_description(data['pokemon'], full=False)
            await callback.message.answer_photo(image, caption=description,
                                                reply_markup=create_inline_kb(1, '–ü–æ–π–º–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞', '–ü—Ä–æ–ø—É—Å–∏—Ç—å',
                                                                              '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    else:
        await callback.message.answer('–£–≤—ã, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!',
                                      reply_markup=create_inline_kb(1, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def hunting_pokemons(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        cur.execute(f'UPDATE Users SET hunting_attempts = hunting_attempts - 1  WHERE id = {callback.from_user.id}')
        base.commit()
        s = cur.execute(f'SELECT pokemons FROM Users WHERE id = {callback.from_user.id}').fetchone()[0].split()

        await callback.message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ!',
                                      reply_markup=create_inline_kb(2, *s))


async def start_fight(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['pokemon'], data['my_pokemon'], data['eat'] = get_characteristic_for_fight(data['pokemon'], callback.data,
                                                                                        callback.from_user.id)
        data['dice'] = random.randrange(0, 2)
        if data['dice']:
            await callback.answer('üé≤ –í–∞—à —Ö–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º!', show_alert=True)
        else:
            await callback.answer(f'üé≤ {data["pokemon"]["Name"]} –±—É–¥–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–º!', show_alert=True)
        await callback.message.edit_text(
            f'üí•üí•üí•\n\n<b>{data["my_pokemon"]["Name"]}</b> –ø—Ä–æ—Ç–∏–≤ <b>{data["pokemon"]["Name"]}</b>!\n\nüí•üí•üí•',
            reply_markup=create_inline_kb(1, '–ù–∞—á–∞—Ç—å –±–æ–π!'))


async def figth(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if '–£—Å–∏–ª–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞' in callback.data:
            data['eat'] -= 1
            data["my_pokemon"] = enhance_pokemon(data["my_pokemon"], callback.from_user.id)
            await callback.message.edit_text(get_text_for_fight(data['dice'], data["my_pokemon"], data['pokemon'],
                                                                enhance=True),
                                             reply_markup=create_inline_kb(1, '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!', '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è'))

        elif callback.data == '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è':
            await callback.message.edit_text('–ë–æ–π –æ–∫–æ–Ω—á–µ–Ω!', reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É',
                                                                                           '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        else:
            # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
            if data['dice']:
                dice_attack, dice_defence, damage, data['pokemon'] = get_fight(1, data['pokemon'], data['my_pokemon'])
                await callback.answer(f'{data["my_pokemon"]["Name"]} - {dice_attack} üé≤ (–ê—Ç–∞–∫–∞)\n\n'
                                      f'{data["pokemon"]["Name"]} - {dice_defence} üé≤ (–ó–∞—â–∏—Ç–∞)', show_alert=True)
                if data['pokemon']['HP'] > 0:
                    await callback.message.edit_text(get_text_for_fight(data['dice'], data["my_pokemon"], data['pokemon'],
                                                                        damage=damage),
                                                     reply_markup=create_inline_kb(1, '–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞', '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è')
                                                     )
                    data['dice'] -= 1
                else:
                    await callback.message.edit_text(
                        f'–£—Ä–∞! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéä\n\n–¢–µ–ø–µ—Ä—å <b>{data["pokemon"]["Name"]}</b> –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –≤–∞—à–∏–º –ø–æ–∫–µ–º–æ–Ω–æ–º!',
                        reply_markup=create_inline_kb(1, '–ó–∞–±—Ä–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É',
                                                      '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                                                      ))
            # –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–±–æ—Ç–∞)
            else:
                dice_attack, dice_defence, damage, data['my_pokemon'] = get_fight(0, data['pokemon'], data['my_pokemon'])
                await callback.answer(f'{data["pokemon"]["Name"]} - {dice_attack} üé≤ (–ê—Ç–∞–∫–∞)\n\n'
                                      f'{data["my_pokemon"]["Name"]} - {dice_defence} üé≤ (–ó–∞—â–∏—Ç–∞)', show_alert=True)
                if data['my_pokemon']['HP'] > 0:
                    await callback.message.edit_text(get_text_for_fight(data['dice'], data["my_pokemon"], data['pokemon'],
                                                                        damage=damage),
                                                     reply_markup=create_inline_kb(1, '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!',
                                                                                   f'–£—Å–∏–ª–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞ ({data["eat"]} üçî)',
                                                                                   '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è') if data['eat'] else
                                                     create_inline_kb(1, '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!', '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è'))
                    data['dice'] += 1
                else:
                    await callback.message.edit_text('–í–∞—à –ø–æ–∫–µ–º–æ–Ω –ø—Ä–æ–∏–≥—Ä–∞–ª!',
                                                     reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É',
                                                                                   '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def handler_take_pokemon(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if take_pokemon(data["pokemon"]["Name"], callback.from_user.id):
            await callback.message.edit_text(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å {data["pokemon"]["Name"]} –≤–∞—à –ø–æ–∫–µ–º–æ–Ω!',
                                             reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ '
                                                                                                  '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        else:
            await callback.message.edit_text('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 10 –ø–æ–∫–µ–º–æ–Ω–æ–≤, –∂–µ–ª–∞–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –∫–æ–≥–æ –Ω–∏–±—É–¥—å?',
                                             reply_markup=create_inline_kb(1, '–í—ã–±—Ä–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã',
                                                                           '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ '
                                                                                               '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def select_replace_pokemon(callback: CallbackQuery, state: FSMContext):
    await FSMPokemon.replace_pokemon.set()
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        s = cur.execute(f'SELECT pokemons FROM Users WHERE id = {callback.from_user.id}').fetchone()[0].split()
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–µ–º–æ–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å.',
                                         reply_markup=create_inline_kb(2, *s))


async def replace_pokemon(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        with sqlite3.connect('Pokemon.db') as base:
            cur = base.cursor()
            ls_pok = cur.execute('SELECT pokemons FROM Users WHERE id = {}'.format(callback.from_user.id)).fetchone()[0]
            ls_pok = ls_pok.replace(callback.data, data["pokemon"]["Name"])
            cur.execute("UPDATE Users SET pokemons = '{}' WHERE id = {}".format(ls_pok, callback.from_user.id))
            base.commit()
            await callback.message.edit_text(f'–¢–µ–ø–µ—Ä—å {data["pokemon"]["Name"]} –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤.',
                                             reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ '
                                                                                                  '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


def register_hunting_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(start_hunting, text='–û—Ö–æ—Ç–∞ –Ω–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤ üéØ', state=FSMPokemon.game)
    dp.register_callback_query_handler(select_pokemons_for_hunting, text=['–ù–∞—á–∞—Ç—å –æ—Ö–æ—Ç—É', '–ü—Ä–æ–ø—É—Å–∏—Ç—å',
                                                                          '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É'],
                                       state=(FSMPokemon.game, FSMPokemon.hunting, FSMPokemon.replace_pokemon))
    dp.register_callback_query_handler(hunting_pokemons, text='–ü–æ–π–º–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞', state=FSMPokemon.hunting)
    dp.register_callback_query_handler(start_fight, text=names_pokemons, state=FSMPokemon.hunting)
    dp.register_callback_query_handler(figth, text=['–ù–∞—á–∞—Ç—å –±–æ–π!', '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!', '–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞', '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è'],
                                       state=FSMPokemon.hunting)
    dp.register_callback_query_handler(figth, Text(startswith='–£—Å–∏–ª–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞'), state=FSMPokemon.hunting)
    dp.register_callback_query_handler(handler_take_pokemon, text='–ó–∞–±—Ä–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞', state=FSMPokemon.hunting)
    dp.register_callback_query_handler(select_replace_pokemon, text='–í—ã–±—Ä–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã',
                                       state=FSMPokemon.hunting)
    dp.register_callback_query_handler(replace_pokemon, text=names_pokemons, state=FSMPokemon.replace_pokemon)
