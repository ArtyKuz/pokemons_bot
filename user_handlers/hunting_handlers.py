import random
import sqlite3
from datetime import date

import asyncpg
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery
from FSM import FSMPokemon
from keyboard.keyboards import create_inline_kb
from services.classes import Pokemon, User
from services.services import get_pokemon_for_hunting, get_fight, access_to_hunting, \
    get_text_for_fight, get_description, create_pokemon_for_fight
from lexicon.lexicon import LEXICON


async def start_hunting(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    current_date = callback.message.date.date()
    date_hunting = await conn.fetchval('SELECT date_hunting FROM users WHERE user_id = $1', callback.from_user.id)
    if date_hunting != current_date:
        await conn.execute('UPDATE users SET date_hunting = $1, hunting_attempts = 10 WHERE user_id = $2',
                           current_date, callback.from_user.id)
    await callback.message.edit_text(f'{LEXICON["start_hunting"]}',
                                     reply_markup=create_inline_kb(1, '–ù–∞—á–∞—Ç—å –æ—Ö–æ—Ç—É', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def select_pokemons_for_hunting(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    await FSMPokemon.hunting.set()
    await callback.answer()
    if await access_to_hunting(callback.from_user.id, conn):
        async with state.proxy() as data:
            data['pokemon'] = await get_pokemon_for_hunting(callback.from_user.id, conn)
            image, description = await get_description(data['pokemon'], conn, full=False)
            await callback.message.answer_photo(image, caption=description,
                                                reply_markup=create_inline_kb(1, '–ü–æ–π–º–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞', '–ü—Ä–æ–ø—É—Å–∏—Ç—å',
                                                                              '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    else:
        await callback.message.answer('–£–≤—ã, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!',
                                      reply_markup=create_inline_kb(1, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def hunting_pokemons(callback: CallbackQuery, conn: asyncpg.connection.Connection):
    await callback.answer()
    await conn.execute('UPDATE users SET hunting_attempts = hunting_attempts - 1  WHERE user_id = $1',
                       callback.from_user.id)
    pokemons = [i['pokemon_name'] for i in await conn.fetch(
        'SELECT pokemon_name FROM users_pokemons JOIN pokemons USING(pokemon_id) '
        'WHERE user_id = $1 AND energy > 0', callback.from_user.id)]
    if pokemons:
        await callback.message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ!',
                                      reply_markup=create_inline_kb(2, *pokemons))
    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤ —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ –Ω—É–ª–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –æ–Ω–∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç',
                                      reply_markup=create_inline_kb(1, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def start_fight(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    async with state.proxy() as data:
        user_pokemon, enemy_pokemon = await create_pokemon_for_fight(callback.data, data['pokemon'], conn)
        data['user_pokemon'] = user_pokemon
        data['enemy_pokemon'] = enemy_pokemon
        data['eat'] = await conn.fetchval('SELECT eat FROM users WHERE user_id = $1', callback.from_user.id)
        data['dice'] = random.randrange(0, 2)
        if data['dice']:
            await callback.answer('üé≤ –í–∞—à —Ö–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º!', show_alert=True)
        else:
            await callback.answer(f'üé≤ {enemy_pokemon} –±—É–¥–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–º!', show_alert=True)
        await callback.message.edit_text(
            f'üí•üí•üí•\n\n<b>{user_pokemon}</b> –ø—Ä–æ—Ç–∏–≤ <b>{enemy_pokemon}</b>!\n\nüí•üí•üí•',
            reply_markup=create_inline_kb(1, '–ù–∞—á–∞—Ç—å –±–æ–π!'))


async def fight(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    async with state.proxy() as data:
        user_pokemon: Pokemon = data['user_pokemon']
        enemy_pokemon: Pokemon = data['enemy_pokemon']
        if '–£—Å–∏–ª–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞' in callback.data:
            data['eat'] -= 1
            data['user_pokemon'] = await user_pokemon.enhance(callback.from_user.id, conn)
            await callback.message.edit_text(get_text_for_fight(user_pokemon, enemy_pokemon, enhance=True),
                                             reply_markup=create_inline_kb(1, '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!', '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è'))

        elif callback.data == '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è':
            await user_pokemon.drop_energy(callback.from_user.id, conn)
            await callback.message.edit_text('–ë–æ–π –æ–∫–æ–Ω—á–µ–Ω!', reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É',
                                                                                           '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        else:
            # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
            if data['dice']:
                dice_attack, dice_defence, damage, enemy_pokemon = get_fight(user_pokemon, enemy_pokemon)
                data['enemy_pokemon'] = enemy_pokemon
                await callback.answer(f'{user_pokemon.name} - {dice_attack} üé≤ (–ê—Ç–∞–∫–∞)\n\n'
                                      f'{enemy_pokemon.name} - {dice_defence} üé≤ (–ó–∞—â–∏—Ç–∞)', show_alert=True)
                if enemy_pokemon.hp > 0:
                    await callback.message.edit_text(get_text_for_fight(user_pokemon, enemy_pokemon, dice=data['dice'],
                                                                        damage=damage),
                                                     reply_markup=create_inline_kb(1, '–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞', '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è')
                                                     )
                    data['dice'] -= 1
                else:
                    await user_pokemon.drop_energy(callback.from_user.id, conn)
                    await callback.message.edit_text(
                        f'–£—Ä–∞! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéä\n\n–¢–µ–ø–µ—Ä—å <b>{enemy_pokemon.name}</b> –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –≤–∞—à–∏–º –ø–æ–∫–µ–º–æ–Ω–æ–º!',
                        reply_markup=create_inline_kb(1, '–ó–∞–±—Ä–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É',
                                                      '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                                                      ))
            # –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–±–æ—Ç–∞)
            else:
                dice_attack, dice_defence, damage, user_pokemon = get_fight(enemy_pokemon, user_pokemon)
                data['user_pokemon'] = user_pokemon
                await callback.answer(f'{enemy_pokemon.name} - {dice_attack} üé≤ (–ê—Ç–∞–∫–∞)\n\n'
                                      f'{user_pokemon.name} - {dice_defence} üé≤ (–ó–∞—â–∏—Ç–∞)', show_alert=True)
                if user_pokemon.hp > 0:
                    await callback.message.edit_text(get_text_for_fight(user_pokemon, enemy_pokemon, dice=data['dice'],
                                                                        damage=damage),
                                                     reply_markup=create_inline_kb(1, '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!',
                                                                                   f'–£—Å–∏–ª–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞ ({data["eat"]} üçî)',
                                                                                   '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è') if data['eat'] else
                                                     create_inline_kb(1, '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!', '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è'))
                    data['dice'] += 1
                else:
                    await user_pokemon.drop_energy(callback.from_user.id, conn)
                    await callback.message.edit_text('–í–∞—à –ø–æ–∫–µ–º–æ–Ω –ø—Ä–æ–∏–≥—Ä–∞–ª!',
                                                     reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É',
                                                                                   '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def handler_take_pokemon(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    async with state.proxy() as data:
        user = User(callback.from_user.id)
        if await user.count_pokemons(conn) < 10:
            await user.add_pokemon(data['enemy_pokemon'].name, conn)
            await callback.message.edit_text(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å {data["enemy_pokemon"].name} –≤–∞—à –ø–æ–∫–µ–º–æ–Ω!',
                                             reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ '
                                                                                                  '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        else:
            await callback.message.edit_text('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 10 –ø–æ–∫–µ–º–æ–Ω–æ–≤, –∂–µ–ª–∞–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –∫–æ–≥–æ –Ω–∏–±—É–¥—å?',
                                             reply_markup=create_inline_kb(1, '–í—ã–±—Ä–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã',
                                                                           '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ '
                                                                                               '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def select_replace_pokemon(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    await FSMPokemon.replace_pokemon.set()
    user_pokemons = await User(callback.from_user.id).get_pokemons(conn)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–µ–º–æ–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å.',
                                     reply_markup=create_inline_kb(2, *user_pokemons))


async def replace_pokemon(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    async with state.proxy() as data:
        await User(callback.from_user.id).replace_pokemon(callback.data, data["enemy_pokemon"].name, conn)
        await callback.message.edit_text(f'–¢–µ–ø–µ—Ä—å {data["enemy_pokemon"].name} –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤.',
                                         reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ '
                                                                                              '–º–µ–Ω—é'))


def register_hunting_handlers(dp: Dispatcher, names_pokemons):
    dp.register_callback_query_handler(start_hunting, text='–û—Ö–æ—Ç–∞ –Ω–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤ üéØ', state=FSMPokemon.game)
    dp.register_callback_query_handler(select_pokemons_for_hunting, text=['–ù–∞—á–∞—Ç—å –æ—Ö–æ—Ç—É', '–ü—Ä–æ–ø—É—Å–∏—Ç—å',
                                                                          '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ö–æ—Ç—É'],
                                       state=(FSMPokemon.game, FSMPokemon.hunting, FSMPokemon.replace_pokemon))
    dp.register_callback_query_handler(hunting_pokemons, text='–ü–æ–π–º–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞', state=FSMPokemon.hunting)
    dp.register_callback_query_handler(start_fight, text=names_pokemons, state=FSMPokemon.hunting)
    dp.register_callback_query_handler(fight, text=['–ù–∞—á–∞—Ç—å –±–æ–π!', '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!', '–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞', '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è'],
                                       state=FSMPokemon.hunting)
    dp.register_callback_query_handler(fight, Text(startswith='–£—Å–∏–ª–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞'), state=FSMPokemon.hunting)
    dp.register_callback_query_handler(handler_take_pokemon, text='–ó–∞–±—Ä–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞', state=FSMPokemon.hunting)
    dp.register_callback_query_handler(select_replace_pokemon, text='–í—ã–±—Ä–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã',
                                       state=FSMPokemon.hunting)
    dp.register_callback_query_handler(replace_pokemon, text=names_pokemons, state=FSMPokemon.replace_pokemon)
