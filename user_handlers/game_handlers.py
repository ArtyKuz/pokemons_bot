import random
import sqlite3

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from FSM import FSMPokemon
from keyboard.keyboards import create_inline_kb
from services.services import get_description, get_characteristic_for_fight, get_fight, evolution_pokemon, \
    start_fortune, buy_in_shop
from lexicon.lexicon import LEXICON

base = sqlite3.connect('Pokemon.db')
cur = base.cursor()
names_pokemons = [i[0] for i in cur.execute('SELECT Name FROM Pokemons').fetchall()]
base.close()


async def start_game(callback: CallbackQuery):
    await callback.answer()
    await FSMPokemon.game.set()
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        if cur.execute('SELECT * FROM Users WHERE id = {}'.format(callback.from_user.id)).fetchone() is None:
            cur.execute(
                f"INSERT INTO Users (id, user_name) VALUES ({callback.from_user.id}, '{callback.from_user.first_name} "
                f"{callback.from_user.last_name}')")
            base.commit()
            await callback.message.edit_text(f'{LEXICON["start_new_game"]}',
                                             reply_markup=create_inline_kb(1, '–í—ã–±–æ—Ä –ø–æ–∫–µ–º–æ–Ω–æ–≤'))

        elif cur.execute('SELECT pokemons FROM Users WHERE id = {}'.format(callback.from_user.id)).fetchone()[
            0] is None or \
                len(cur.execute('SELECT pokemons FROM Users WHERE id = {}'.format(callback.from_user.id)).fetchone()[
                        0].split()) < 3:
            await callback.message.edit_text(f'{LEXICON["start_new_game"]}',
                                             reply_markup=create_inline_kb(1, '–í—ã–±–æ—Ä –ø–æ–∫–µ–º–æ–Ω–æ–≤'))
        else:
            await callback.message.answer(f'{LEXICON["start_game"]}', reply_markup=create_inline_kb(2,
                                                                                                    '–û—Ö–æ—Ç–∞ –Ω–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤ üéØ',
                                                                                                    '–õ–∏–≥–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤ üèÜ',
                                                                                                    '–ú–æ–∏ –ø–æ–∫–µ–º–æ–Ω—ã',
                                                                                                    '–†—é–∫–∑–∞–∫ üéí',
                                                                                                    '–ú–∞–≥–∞–∑–∏–Ω üõç',
                                                                                                    '–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã üé∞',
                                                                                                    '–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã ‚ùå'))


async def start_first_select(callback: CallbackQuery, state: FSMContext):
    await FSMPokemon.first_select.set()
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        s = [i[0] for i in cur.execute(f'SELECT Name FROM Pokemons WHERE Level = 1 AND Type <> "–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–π üòµ‚Äçüí´"'
                                       f'AND Type <> "–ü—Ä–∏–∑—Ä–∞–∫ üëª"').fetchall()]
        pokemons = random.sample(s, k=10)
        async with state.proxy() as data:
            data['first_select'] = set(pokemons)
    await callback.message.edit_text('–°–¥–µ–ª–∞–π —Å–≤–æ–π –≤—ã–±–æ—Ä!',
                                     reply_markup=create_inline_kb(2, *pokemons))


async def first_select(callback: CallbackQuery, state: FSMContext):
    await callback.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å {callback.data} –≤–∞—à –ø–æ–∫–µ–º–æ–Ω!', show_alert=True)
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        ls_pok = cur.execute('SELECT pokemons FROM Users WHERE id = {}'.format(callback.from_user.id)).fetchone()[0]
        if ls_pok == None:
            cur.execute(
                "UPDATE Users SET pokemons = '{}' WHERE id = {}".format(callback.data, callback.from_user.id))
            base.commit()
            async with state.proxy() as data:
                data['first_select'] = data['first_select'] - {callback.data}
                await callback.message.edit_text('–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–∞–ª—å—à–µ!',
                                                 reply_markup=create_inline_kb(2, *data['first_select']))
        else:
            ls_pok += f' {callback.data}'
            cur.execute("UPDATE Users SET pokemons = '{}' WHERE id = {}".format(ls_pok, callback.from_user.id))
            base.commit()
            if len(ls_pok.split()) == 3:
                keyboard = create_inline_kb(1, '–ú–æ–∏ –ø–æ–∫–µ–º–æ–Ω—ã', '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
                await callback.message.edit_text('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–±—Ä–∞–ª–∏ 3 –ø–æ–∫–µ–º–æ–Ω–æ–≤, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ '
                                                 '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤ –ª–∏–±–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É', reply_markup=keyboard)
                await FSMPokemon.game.set()
            else:
                async with state.proxy() as data:
                    data['first_select'] = data['first_select'] - {callback.data}
                    keyboard = create_inline_kb(2, *data['first_select'])
                    await callback.message.edit_text('–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–∞–ª—å—à–µ!', reply_markup=keyboard)


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ª–∏—á–Ω—ã—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤
async def watch_person_pokemons(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        s = cur.execute(f'SELECT pokemons FROM Users WHERE id = {callback.from_user.id}').fetchone()[0].split()
        await callback.message.answer('–í–∞—à–∏ –ø–æ–∫–µ–º–æ–Ω—ã!', reply_markup=create_inline_kb(2, *s, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É üîÑ'))


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—á–Ω–æ–º –ø–æ–∫–µ–º–æ–Ω–µ
async def description_person_pokemon(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with state.proxy() as data:
        data['evolution'] = callback.data
    image, description = get_description(callback.data, full=False)
    await callback.message.answer_photo(image, caption=description,
                                        reply_markup=create_inline_kb(1, '–≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞ üåÄ',
                                                                      '–ú–æ–∏ –ø–æ–∫–µ–º–æ–Ω—ã', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É üîÑ'))


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏ –ø–æ–∫–µ–º–æ–Ω–æ–≤
async def evolution_pokemon_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    async with state.proxy() as data:
        ev = evolution_pokemon(pokemon=data['evolution'], id=callback.from_user.id)
    if type(ev) == int and ev == 0:
        await callback.message.answer(f'‚ö† –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–æ–∫–µ–º–æ–Ω –Ω–µ –∏–º–µ–µ—Ç —ç–≤–æ–ª—é—Ü–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å '
                                      f'–¥—Ä—É–≥–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞!',
                                      reply_markup=create_inline_kb(1, '–ú–æ–∏ –ø–æ–∫–µ–º–æ–Ω—ã', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É üîÑ'))
    elif ev == 'max':
        await callback.message.answer(f'‚ö† –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–æ–∫–µ–º–æ–Ω —É–∂–µ –¥–æ—Å—Ç–∏–≥ –Ω–∞–∏–≤—ã—Å—à–µ–π —Ñ–æ—Ä–º—ã, '
                                      f'–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞!',
                                      reply_markup=create_inline_kb(1, '–ú–æ–∏ –ø–æ–∫–µ–º–æ–Ω—ã', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É üîÑ'))
    elif not ev:
        await callback.message.answer('‚ö† –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–≥–æ'
                                      ' –ø–æ–∫–µ–º–æ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ <b>–∫–∞–º–Ω—è —ç–≤–æ–ª—é—Ü–∏–∏.</b>',
                                      reply_markup=create_inline_kb(1, '–ú–æ–∏ –ø–æ–∫–µ–º–æ–Ω—ã', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É üîÑ'))
    else:
        await callback.message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é üéâüéâüéâ\n–≠–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ\n{data["evolution"]} '
                                      f'—ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª –≤ <b>{ev}!</b>',
                                      reply_markup=create_inline_kb(1, '–ú–æ–∏ –ø–æ–∫–µ–º–æ–Ω—ã', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É üîÑ'))


async def wheel_of_Fortune(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_date = callback.message.date.date().strftime('%d.%m.%Y')
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        if cur.execute(f'SELECT date_fortune FROM Users WHERE id = {callback.from_user.id}').fetchone()[0] != user_date:
            cur.execute(
                f'UPDATE Users SET date_fortune = "{user_date}", wheel_of_Fortune = 1 WHERE id = {callback.from_user.id}')
            base.commit()
    await callback.message.answer(LEXICON['wheel_Fortune'],
                                  reply_markup=create_inline_kb(1, '–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ!', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def spin_wheel_fortune(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    select_fortune = start_fortune(callback.from_user.id)
    if select_fortune == 'eat':
        await callback.message.edit_text('–°–µ–≥–æ–¥–Ω—è –≤–∞–º –¥–æ—Å—Ç–∞–ª–∞—Å—å: <b>–ï–¥–∞ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –ø–æ–∫–µ–º–æ–Ω–æ–≤</b> üçî',
                                         reply_markup=create_inline_kb(1, '–†—é–∫–∑–∞–∫ üéí', '–ú–∞–≥–∞–∑–∏–Ω üõç',
                                                                       '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    elif type(select_fortune) == int:
        await callback.message.edit_text(f'–í–∞–º –≤—ã–ø–∞–ª–æ: <b>{select_fortune} –º–æ–Ω–µ—Ç</b> üí∞',
                                         reply_markup=create_inline_kb(1, '–†—é–∫–∑–∞–∫ üéí', '–ú–∞–≥–∞–∑–∏–Ω üõç',
                                                                       '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    elif select_fortune == 'evolution_stone':
        await callback.message.edit_text(f'–°–µ–≥–æ–¥–Ω—è –≤–∞–º –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–ª–æ! –í–∞–º –≤—ã–ø–∞–ª - <b>–ö–∞–º–µ–Ω—å —ç–≤–æ–ª—é—Ü–∏–∏!</b> üíé',
                                         reply_markup=create_inline_kb(1, '–†—é–∫–∑–∞–∫ üéí', '–ú–∞–≥–∞–∑–∏–Ω üõç',
                                                                       '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    else:
        await callback.message.edit_text('–ö—Ä—É—Ç–∏—Ç—å <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b> –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!',
                                         reply_markup=create_inline_kb(1, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def backpack(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        coins, eat, stone, icons = cur.execute(f'SELECT coins, eat, evolution_stone, icons FROM Users WHERE id = '
                                        f'{callback.from_user.id}').fetchall()[0]
        await callback.message.answer(f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –∏–º–µ–µ—Ç—Å—è:\n'
                                      f'üîπ –º–æ–Ω–µ—Ç - <b>{coins}</b> üí∞\nüîπ –ø–æ—Ä—Ü–∏–∏ –µ–¥—ã - <b>{eat}</b> üçî\n'
                                      f'üîπ –ö–∞–º–Ω–µ–π —ç–≤–æ–ª—é—Ü–∏–∏ - <b>{stone}</b> üíé\n'
                                      f'üîπ –ó–Ω–∞—á–∫–∏:\n{icons}',
                                      reply_markup=create_inline_kb(1, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def shop_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å:\n- –ï–¥–∞ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –ø–æ–∫–µ–º–æ–Ω–∞ üçî - —Å—Ç–æ–∏–º–æ—Å—Ç—å 50 –º–æ–Ω–µ—Ç üí∞\n'
                                  '- –ö–∞–º–µ–Ω—å —ç–≤–æ–ª—é—Ü–∏–∏ üíé - —Å—Ç–æ–∏–º–æ—Å—Ç—å 100 –º–æ–Ω–µ—Ç üí∞.',
                                  reply_markup=create_inline_kb(1, **{'–ö—É–ø–∏—Ç—å üçî –∑–∞ 50 üí∞': 'eat',
                                                                      '–ö—É–ø–∏—Ç—å üíé –∑–∞ 100 üí∞': 'evolution_stone',
                                                                      '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ '
                                                                                                  '–º–µ–Ω—é'}))


async def shopping(callback: CallbackQuery):
    await callback.answer()
    menu = {'eat': '–ï–¥–∞ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –ø–æ–∫–µ–º–æ–Ω–∞ üçî', 'evolution_stone': '–ö–∞–º–µ–Ω—å —ç–≤–æ–ª—é—Ü–∏–∏ üíé'}
    if buy_in_shop(callback.data, callback.from_user.id):
        await callback.message.answer(f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ - <b>{menu[callback.data]}!</b>',
                                      reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏',
                                                                    '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.',
                                      reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏',
                                                                    '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


def register_game_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(start_game, text=['–ò–ì–†–ê üé≤', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É üîÑ', '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
                                                         '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    dp.register_callback_query_handler(start_game, text=['–ò–ì–†–ê üé≤', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É üîÑ', '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
                                                         '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                                       state=(FSMPokemon.game, FSMPokemon.hunting, FSMPokemon.replace_pokemon,
                                              FSMPokemon.pokemon_league))
    dp.register_callback_query_handler(start_first_select, text='–í—ã–±–æ—Ä –ø–æ–∫–µ–º–æ–Ω–æ–≤', state=FSMPokemon.game)
    dp.register_callback_query_handler(first_select, text=names_pokemons, state=FSMPokemon.first_select)
    dp.register_callback_query_handler(watch_person_pokemons, text='–ú–æ–∏ –ø–æ–∫–µ–º–æ–Ω—ã', state=FSMPokemon.game)
    dp.register_callback_query_handler(description_person_pokemon, text=names_pokemons, state=FSMPokemon.game)
    dp.register_callback_query_handler(evolution_pokemon_handler, text='–≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞ üåÄ',
                                       state=FSMPokemon.game)
    dp.register_callback_query_handler(wheel_of_Fortune, text='–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã üé∞', state=FSMPokemon.game)
    dp.register_callback_query_handler(spin_wheel_fortune, text='–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ!', state=FSMPokemon.game)
    dp.register_callback_query_handler(backpack, text='–†—é–∫–∑–∞–∫ üéí', state=FSMPokemon.game)
    dp.register_callback_query_handler(shop_menu, text=['–ú–∞–≥–∞–∑–∏–Ω üõç', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏'], state=FSMPokemon.game)
    dp.register_callback_query_handler(shopping, text=['eat', 'evolution_stone'],
                                       state=FSMPokemon.game)
