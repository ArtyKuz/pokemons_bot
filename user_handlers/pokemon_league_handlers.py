import random

import asyncpg
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery

from FSM import FSMPokemon
from keyboard.keyboards import create_inline_kb
from lexicon.lexicon import LEXICON
from services.classes import Pokemon, User
from services.services import (create_pokemon_for_fight, get_description,
                               get_fight, get_pokemons_icon,
                               get_text_for_fight, get_text_for_icons)

icons = {1: '–ó–∞–≤–æ–µ–≤–∞—Ç—å –ö–∞–º–µ–Ω–Ω—ã–π –∑–Ω–∞—á–æ–∫ üîò', 2: '–ó–∞–≤–æ–µ–≤–∞—Ç—å –ö–∞—Å–∫–∞–¥–Ω—ã–π –∑–Ω–∞—á–æ–∫ üíß', 3: '–ó–∞–≤–æ–µ–≤–∞—Ç—å –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∑–Ω–∞—á–æ–∫ ‚ö°',
         4: '–ó–∞–≤–æ–µ–≤–∞—Ç—å –ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–π –∑–Ω–∞—á–æ–∫ üßø', 5: '–ó–∞–≤–æ–µ–≤–∞—Ç—å –†–∞–¥—É–∂–Ω—ã–π –∑–Ω–∞—á–æ–∫ üåà', 6: '–ó–∞–≤–æ–µ–≤–∞—Ç—å –°–µ—Ä–¥–µ—á–Ω—ã–π –∑–Ω–∞—á–æ–∫ üíú',
         7: '–ó–∞–≤–æ–µ–≤–∞—Ç—å –í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –∑–Ω–∞—á–æ–∫ üåã', 8: '–ó–∞–≤–æ–µ–≤–∞—Ç—å –ó–µ–º–ª—è–Ω–æ–π –∑–Ω–∞—á–æ–∫ üü§'}


async def start_pokemon_league(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    await FSMPokemon.pokemon_league.set()
    await callback.answer()
    pokemons = await User(callback.from_user.id).get_pokemons(conn)
    if len(pokemons) < 7:
        await callback.message.answer('–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –õ–∏–≥–µ –ü–æ–∫–µ–º–æ–Ω–æ–≤ —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 7 –ø–æ–∫–µ–º–æ–Ω–æ–≤.\n\n'
                                      '–ü–æ–π–º–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–æ–≤ –º–æ–∂–Ω–æ –≤ —Ä–µ–∂–∏–º–µ <b>"–û—Ö–æ—Ç–∞ –Ω–∞ –ø–æ–∫–µ–º–æ–Ω–æ–≤"</b>.',
                                      reply_markup=create_inline_kb(1, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    else:
        async with state.proxy() as data:
            data['point'] = await conn.fetchval(f'SELECT points FROM users WHERE user_id = $1', callback.from_user.id)
            await callback.message.answer(f'{get_text_for_icons(data["point"], LEXICON["start_pokemon_league"])}',
                                          reply_markup=create_inline_kb(1, icons[data["point"]],
                                                                        '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def pre_start_fight(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    await callback.answer()
    async with state.proxy() as data:
        data['icon'] = ' '.join(callback.data.split()[1:])
        data['level'] = 1
        data['my_point'] = 0
        data['enemy_point'] = 0
        data['all_enemy_pokemons']: list = await get_pokemons_icon(data['point'], conn)
        pokemons = await User(callback.from_user.id).get_pokemons_for_fight(conn)
        if len(pokemons) >= 3:
            data['my_pokemons']: set = set(pokemons)
            await callback.message.answer(f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–≤–æ–µ–≤–∞—Ç—å {data["icon"]} –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å:\n'
                                          f'- <b>{data["all_enemy_pokemons"][0]}</b>\n'
                                          f'- <b>{data["all_enemy_pokemons"][1]}</b>\n'
                                          f'- <b>{data["all_enemy_pokemons"][2]}</b>\n\n'
                                          f'–°—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ 2-—Ö –ø–æ–±–µ–¥!',
                                          reply_markup=create_inline_kb(1, '–ù–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ!',
                                                                        '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        else:
            await callback.message.answer('–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞ –∑–Ω–∞—á–æ–∫ —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3-—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤ '
                                          '—Å —ç–Ω–µ—Ä–≥–∏–µ–π –±–æ–ª—å—à–µ 0, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ —ç–Ω–µ—Ä–≥–∏—è –≤–∞—à–∏—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è!',
                                          reply_markup=create_inline_kb(1, '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


async def select_pokemon(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    await callback.answer()
    async with state.proxy() as data:
        enemy_pokemon = random.choice(list(data['all_enemy_pokemons']))
        data['enemy_pokemon']: Pokemon = await create_pokemon_for_fight(enemy_pokemon, conn)
        data['all_enemy_pokemons']: set = set(data['all_enemy_pokemons']) - {str(data['enemy_pokemon'])}
        image, description = await get_description(enemy_pokemon, conn, full=False)
        await callback.message.answer_photo(image, caption=f'{description}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞!',
                                            reply_markup=create_inline_kb(2, *data['my_pokemons']))


async def start_fight_for_icons(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    async with state.proxy() as data:
        data['my_pokemons'] = data['my_pokemons'] - {callback.data}
        user_pokemon = await create_pokemon_for_fight(callback.data, conn)
        enemy_pokemon = data['enemy_pokemon']
        data['user_pokemon'] = user_pokemon
        data['eat'] = await conn.fetchval(f'SELECT eat FROM users WHERE user_id = $1', callback.from_user.id)
        data['dice'] = random.randrange(0, 2)
        if data['dice']:
            await callback.answer('üé≤ –í–∞—à —Ö–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º!', show_alert=True)
        else:
            await callback.answer(f'üé≤ {enemy_pokemon} –±—É–¥–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–º!', show_alert=True)
        await callback.message.answer(
            f'<b>{data["level"]} - –†–∞—É–Ω–¥!</b> üí•üí•üí•\n\n<b>{user_pokemon}</b> –ø—Ä–æ—Ç–∏–≤ <b>{enemy_pokemon}</b>!',
            reply_markup=create_inline_kb(1, '–ù–∞—á–∞—Ç—å –±–æ–π!'))


async def fight_for_icons(callback: CallbackQuery, state: FSMContext, conn: asyncpg.connection.Connection):
    async with state.proxy() as data:
        user_pokemon: Pokemon = data['user_pokemon']
        enemy_pokemon: Pokemon = data['enemy_pokemon']
        if '–£—Å–∏–ª–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞' in callback.data:
            data['eat'] -= 1
            data['my_pokemon'] = await user_pokemon.enhance(callback.from_user.id, conn)
            await callback.message.edit_text(get_text_for_fight(user_pokemon, enemy_pokemon, enhance=True),
                                             reply_markup=create_inline_kb(1, '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!', '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è'))
        elif callback.data == '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è':
            await user_pokemon.drop_energy(callback.from_user.id, conn)
            data['enemy_point'] += 1
            if data['my_point'] < 2 and data['enemy_point'] < 2:
                data['level'] += 1
                await callback.message.edit_text(f'–ü–æ–±–µ–¥–∞ –ø—Ä–∏—Å—É–∂–¥–µ–Ω–∞ <b>{enemy_pokemon}!</b>',
                                                 reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                                                                               '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            else:
                await callback.message.edit_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!',
                                                 reply_markup=create_inline_kb(1, '–õ–∏–≥–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤ üèÜ',
                                                                               '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
        elif data['dice']:
            dice_attack, dice_defence, damage, enemy_pokemon = get_fight(user_pokemon, enemy_pokemon)
            data['enemy_pokemon'] = enemy_pokemon
            await callback.answer(f'{user_pokemon} - {dice_attack} üé≤ (–ê—Ç–∞–∫–∞)\n\n'
                                  f'{enemy_pokemon} - {dice_defence} üé≤ (–ó–∞—â–∏—Ç–∞)', show_alert=True)
            if enemy_pokemon.hp > 0:
                await callback.message.edit_text(
                    get_text_for_fight(user_pokemon, enemy_pokemon, dice=data['dice'], damage=damage),
                    reply_markup=create_inline_kb(1, '–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞', '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è'))
                data['dice'] -= 1
            else:
                data['my_point'] += 1
                if data['my_point'] < 2 and data['enemy_point'] < 2:
                    data['level'] += 1
                    await callback.message.edit_text(
                        f'<b>{user_pokemon}</b> –ø–æ–±–µ–¥–∏–ª!',
                        reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                else:
                    await user_pokemon.drop_energy(callback.from_user.id, conn)
                    if data['my_point'] > data['enemy_point']:
                        await User(callback.from_user.id).add_icon(data["point"], conn)
                        await callback.message.edit_text(f'–£—Ä–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{data["icon"]}!</b>',
                                                         reply_markup=create_inline_kb(1, '–õ–∏–≥–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤ üèÜ',
                                                                                       '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                    else:
                        await callback.message.edit_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!',
                                                         reply_markup=create_inline_kb(1, '–õ–∏–≥–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤ üèÜ',
                                                                                       '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

        # –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–±–æ—Ç–∞)
        else:
            dice_attack, dice_defence, damage, user_pokemon = get_fight(enemy_pokemon, user_pokemon)
            data['user_pokemon'] = user_pokemon
            await callback.answer(f'{enemy_pokemon} - {dice_attack} üé≤ (–ê—Ç–∞–∫–∞)\n\n'
                                  f'{user_pokemon} - {dice_defence} üé≤ (–ó–∞—â–∏—Ç–∞)', show_alert=True)
            if user_pokemon.hp > 0:
                await callback.message.edit_text(
                    get_text_for_fight(user_pokemon, enemy_pokemon, dice=data['dice'], damage=damage),
                    reply_markup=create_inline_kb(1, '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!',
                                                  f'–£—Å–∏–ª–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞ ({data["eat"]} üçî)',
                                                  '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è') if data['eat'] else
                    create_inline_kb(1, '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!', '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è'))
                data['dice'] += 1
            else:
                await user_pokemon.drop_energy(callback.from_user.id, conn)
                data['enemy_point'] += 1
                if data['my_point'] < 2 and data['enemy_point'] < 2:
                    data['level'] += 1
                    await callback.message.edit_text(f'<b>{enemy_pokemon}</b> –ø–æ–±–µ–¥–∏–ª!',
                                                     reply_markup=create_inline_kb(1, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                                                                                   '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                else:
                    if data['my_point'] > data['enemy_point']:
                        await User(callback.from_user.id).add_icon(data["point"], conn)
                        await callback.message.edit_text(f'–£—Ä–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{data["icon"]}!</b>',
                                                         reply_markup=create_inline_kb(1, '–õ–∏–≥–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤ üèÜ',
                                                                                       '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                    else:
                        await callback.message.edit_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!',
                                                         reply_markup=create_inline_kb(1, '–õ–∏–≥–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤ üèÜ',
                                                                                       '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))


def register_pokemon_league_handlers(dp: Dispatcher, names_pokemons):
    dp.register_callback_query_handler(start_pokemon_league, text='–õ–∏–≥–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤ üèÜ', state=(FSMPokemon.game,
                                                                                             FSMPokemon.pokemon_league))
    dp.register_callback_query_handler(pre_start_fight, text=list(icons.values()), state=FSMPokemon.pokemon_league)
    dp.register_callback_query_handler(select_pokemon, text=['–ù–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ!',
                                                             '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'], state=FSMPokemon.pokemon_league)
    dp.register_callback_query_handler(start_fight_for_icons, text=names_pokemons, state=FSMPokemon.pokemon_league)
    dp.register_callback_query_handler(fight_for_icons, text=['–ù–∞—á–∞—Ç—å –±–æ–π!',
                                                              '–ê—Ç–∞–∫–æ–≤–∞—Ç—å!',
                                                              '–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞',
                                                              '–°–¥–∞—Ç—å—Å—è üè≥Ô∏è'], state=FSMPokemon.pokemon_league)
    dp.register_callback_query_handler(fight_for_icons, Text(startswith='–£—Å–∏–ª–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞'),
                                       state=FSMPokemon.pokemon_league)
