import sqlite3

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from FSM import FSMPokemon
from keyboard.keyboards import create_inline_kb
from services.services import get_description, get_best_pokemons
from lexicon.lexicon import LEXICON

base = sqlite3.connect('Pokemon.db')
cur = base.cursor()
types_pok = [i[0] for i in cur.execute('SELECT Type FROM Pokemons').fetchall()]
names_pokemons = [i[0] for i in cur.execute('SELECT Name FROM Pokemons').fetchall()]
base.close()


async def start_pokedeks(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(f'{LEXICON["start_pokedeks"]}', reply_markup=create_inline_kb(1, '–¢–∏–ø—ã –ø–æ–∫–µ–º–æ–Ω–æ–≤',
                                                                                                   '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã',
                                                                                                   '–í—ã—Ö–æ–¥ –∏–∑ –ü–û–ö–ï–î–ï–ö–°–ê ‚ùå'))
    await FSMPokemon.pokedeks.set()


async def types_pokemons(callback: CallbackQuery):
    await callback.answer()
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        pokemon_types = sorted(i[0] for i in cur.execute('SELECT DISTINCT Type FROM Pokemons').fetchall())
        await callback.message.answer('–í—ã–±–∏—Ä–∞–π —Ç–∏–ø –ø–æ–∫–µ–º–æ–Ω–∞!',
                                      reply_markup=create_inline_kb(2, *pokemon_types, '–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é –ü–æ–∫–µ–¥–µ–∫—Å–∞ üìñ'))


async def one_type_pokemons(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        pokemons = [i[0] for i in cur.execute(f'SELECT Name FROM Pokemons WHERE Type LIKE '
                                          f'"{callback.data}" ORDER BY –≠–≤–æ–ª—é—Ü–∏—è').fetchall()]
        await callback.message.answer(f'–ö —Ç–∏–ø—É <b>{callback.data}</b> –æ—Ç–Ω–æ—Å—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã:',
                                      reply_markup=create_inline_kb(2, *pokemons))


async def description_pokemon(callback: CallbackQuery):
    await callback.answer()
    image, description = get_description(callback.data)
    await callback.message.answer_photo(image, caption=description,
                                        reply_markup=create_inline_kb(1, '–¢–∏–ø—ã –ø–æ–∫–µ–º–æ–Ω–æ–≤', '–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é –ü–æ–∫–µ–¥–µ–∫—Å–∞ üìñ'))


async def best_pokemons(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å 10-–∫–∏ –ª—É—á—à–∏—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º:',
                                     reply_markup=create_inline_kb(1, '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ —Å—É–º–º–µ —Ö–∞—Ä-–∫',
                                                                   '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ –ó–¥–æ—Ä–æ–≤—å—é',
                                                                   '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ –ê—Ç–∞–∫–µ',
                                                                   '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ –ó–∞—â–∏—Ç–µ',
                                                                   '–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é –ü–æ–∫–µ–¥–µ–∫—Å–∞ üìñ'))


async def show_best_pokemons(callback: CallbackQuery):
    await callback.answer()
    best_pokemons = get_best_pokemons(callback.data)
    await callback.message.edit_text(f'{best_pokemons}', reply_markup=create_inline_kb(1, '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã',
                                                                           '–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é –ü–æ–∫–µ–¥–µ–∫—Å–∞ üìñ'))


async def exit_pokedeks(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ü–æ–∫–µ–º–æ–Ω–æ–≤!',
                                  reply_markup=create_inline_kb(1, '–ò–ì–†–ê üé≤', '–ü–û–ö–ï–î–ï–ö–° üìñ'))
    await state.finish()


def register_pokedeks_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(start_pokedeks, text='–ü–û–ö–ï–î–ï–ö–° üìñ')
    dp.register_callback_query_handler(start_pokedeks, text=['–ü–û–ö–ï–î–ï–ö–° üìñ', '–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é –ü–æ–∫–µ–¥–µ–∫—Å–∞ üìñ'],
                                       state=FSMPokemon.pokedeks)
    dp.register_callback_query_handler(types_pokemons, text='–¢–∏–ø—ã –ø–æ–∫–µ–º–æ–Ω–æ–≤', state=FSMPokemon.pokedeks)
    dp.register_callback_query_handler(one_type_pokemons, text=types_pok, state=FSMPokemon.pokedeks)
    dp.register_callback_query_handler(description_pokemon, text=names_pokemons, state=FSMPokemon.pokedeks)
    dp.register_callback_query_handler(best_pokemons, text='–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã', state=FSMPokemon.pokedeks)
    dp.register_callback_query_handler(show_best_pokemons, text=['–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ —Å—É–º–º–µ —Ö–∞—Ä-–∫',
                                                                 '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ –ó–¥–æ—Ä–æ–≤—å—é',
                                                                 '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ –ê—Ç–∞–∫–µ',
                                                                 '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ –ó–∞—â–∏—Ç–µ'],
                                       state=FSMPokemon.pokedeks)
    dp.register_callback_query_handler(exit_pokedeks, text='–í—ã—Ö–æ–¥ –∏–∑ –ü–û–ö–ï–î–ï–ö–°–ê ‚ùå', state=FSMPokemon.pokedeks)
