import random
import sqlite3

from services.classes import Pokemon


def get_pokemons_for_first_select():
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        data = [i[0] for i in cur.execute(f'SELECT Name FROM Pokemons WHERE Level = 1 AND Type <> "–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–π üòµ‚Äçüí´"'
                                       f'AND Type <> "–ü—Ä–∏–∑—Ä–∞–∫ üëª"').fetchall()]
        pokemons = random.sample(data, k=10)
        return set(pokemons)


def get_description(pokemon_name, full=True):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–µ–º–æ–Ω–∞.
    –ê—Ç—Ä–∏–±—É—Ç full –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è'''

    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        s = cur.execute(f'SELECT * FROM Pokemons WHERE Name = "{pokemon_name}"').fetchall()[0]
        if full:
            return s[8], f'<b>{s[9]}</b>\n\n<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n–ó–¥–æ—Ä–æ–≤—å–µ üíä - {s[3]}\n–ê—Ç–∞–∫–∞ ‚öî - {s[4]}\n' \
                         f'–ó–∞—â–∏—Ç–∞ üõ° - {s[5]}\n\n<b>–ò–º–µ–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞–¥ —Ç–∏–ø–∞–º–∏:</b>\n{s[6]}'
        else:
            return s[8], f'<b>{pokemon_name}\n\n</b><b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n–ó–¥–æ—Ä–æ–≤—å–µ üíä - {s[3]}\n–ê—Ç–∞–∫–∞ ‚öî - {s[4]}\n' \
                         f'–ó–∞—â–∏—Ç–∞ üõ° - {s[5]}\n\n<b>–ò–º–µ–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞–¥ —Ç–∏–ø–∞–º–∏:</b>\n{s[6]}'


def get_best_pokemons(best: str) -> str:
    '''–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º 10-—Ç–∏ –ª—É—á—à–∏—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤'''

    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        best_pokemons: str = f'{best}:\n\n'
        if best == '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ —Å—É–º–º–µ —Ö–∞—Ä-–∫':
            s = cur.execute(
                f'SELECT Name, HP+–ê—Ç–∞–∫–∞+–ó–∞—â–∏—Ç–∞ FROM Pokemons ORDER BY HP+–ê—Ç–∞–∫–∞+–ó–∞—â–∏—Ç–∞ DESC LIMIT 10').fetchall()
            for ind, pokemon in enumerate(s, 1):
                best_pokemons += f'{ind}. {pokemon[0]} - {pokemon[1]}\n'

        elif best == '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ –ó–¥–æ—Ä–æ–≤—å—é':
            s = cur.execute(
                f'SELECT Name, HP FROM Pokemons ORDER BY HP DESC LIMIT 10').fetchall()
            for ind, pokemon in enumerate(s, 1):
                best_pokemons += f'{ind}. {pokemon[0]} - {pokemon[1]}\n'

        elif best == '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ –ê—Ç–∞–∫–µ':
            s = cur.execute(
                f'SELECT Name, –ê—Ç–∞–∫–∞ FROM Pokemons ORDER BY –ê—Ç–∞–∫–∞ DESC LIMIT 10').fetchall()
            for ind, pokemon in enumerate(s, 1):
                best_pokemons += f'{ind}. {pokemon[0]} - {pokemon[1]}\n'

        elif best == '–õ—É—á—à–∏–µ –ø–æ–∫–µ–º–æ–Ω—ã –ø–æ –ó–∞—â–∏—Ç–µ':
            s = cur.execute(
                f'SELECT Name, –ó–∞—â–∏—Ç–∞ FROM Pokemons ORDER BY –ó–∞—â–∏—Ç–∞ DESC LIMIT 10').fetchall()
            for ind, pokemon in enumerate(s, 1):
                best_pokemons += f'{ind}. {pokemon[0]} - {pokemon[1]}\n'

        return best_pokemons


def access_to_hunting(id):
    '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª-–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–µ–∂–∏–º–µ –û—Ö–æ—Ç—ã –Ω–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤'''

    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        if cur.execute(f'SELECT hunting_attempts FROM Users WHERE id = {id}').fetchone()[0] > 0:
            return True
        return False


def get_pokemon_for_hunting():
    '''–§—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞ 0 –∏–ª–∏ 1 —É—Ä–æ–≤–Ω—è, –¥–ª—è —Ä–µ–∂–∏–º–∞ –û—Ö–æ—Ç—ã –Ω–∞ –ü–æ–∫–µ–º–æ–Ω–æ–≤'''

    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        return random.choice([i[0] for i in cur.execute(f'SELECT name FROM Pokemons WHERE Level < 2').fetchall()])


def get_fight(pokemon1: Pokemon, pokemon2: Pokemon):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤–æ –≤—Ä–µ–º—è –±–æ—è –ø–æ–∫–µ–º–æ–Ω–æ–≤'''

    dice_attack = random.randrange(1, 7)
    dice_defense = random.randrange(1, 7)
    if (pokemon2.type in pokemon1.superiority) and dice_attack < 6:
        dice_attack += 1
    if (pokemon1.type in pokemon2.superiority) and dice_defense < 6:
        dice_defense += 1
    attack = pokemon1.attack * (dice_attack / 10)
    defense = pokemon2.defense * (dice_defense / 10)
    damage = round(attack - defense) if round(attack - defense) > 0 else 0
    pokemon2.hp -= damage
    return dice_attack, dice_defense, damage, pokemon2


def get_text_for_fight(user_pokemon: Pokemon, enemy_pokemon: Pokemon, dice=None, damage=None, enhance=None):
    if enhance:
        return f'<b>{user_pokemon.name}</b>\n' \
               f'–ó–¥–æ—Ä–æ–≤—å–µ üíä - <b>{user_pokemon.hp} (+10)</b>\n' \
               f'–ê—Ç–∞–∫–∞ ‚öî - <b>{user_pokemon.attack} (+10)</b>\n' \
               f'–ó–∞—â–∏—Ç–∞ üõ° - <b>{user_pokemon.defense} (+10)</b>\n' \
               f'----------------------------------------------------------\n' \
               f'<b>{enemy_pokemon.name}</b>\n' \
               f'–ó–¥–æ—Ä–æ–≤—å–µ üíä - <b>{enemy_pokemon.hp}</b>\n' \
               f'–ê—Ç–∞–∫–∞ ‚öî - <b>{enemy_pokemon.attack}</b>\n' \
               f'–ó–∞—â–∏—Ç–∞ üõ° - <b>{enemy_pokemon.defense}</b>'
    elif dice:
        text = f'{user_pokemon.name} –Ω–∞–Ω–æ—Å–∏—Ç <b>{damage}</b> —É—Ä–æ–Ω–∞! üí•\n\n'
    else:
        text = f'{enemy_pokemon.name} –Ω–∞–Ω–æ—Å–∏—Ç <b>{damage}</b> —É—Ä–æ–Ω–∞! üí•\n\n'
    text += f'<b>{user_pokemon.name}</b>\n' \
            f'–ó–¥–æ—Ä–æ–≤—å–µ üíä - <b>{user_pokemon.hp}</b>\n' \
            f'–ê—Ç–∞–∫–∞ ‚öî - <b>{user_pokemon.attack}</b>\n' \
            f'–ó–∞—â–∏—Ç–∞ üõ° - <b>{user_pokemon.defense}</b>\n' \
            f'----------------------------------------------------------\n' \
            f'<b>{enemy_pokemon.name}</b>\n' \
            f'–ó–¥–æ—Ä–æ–≤—å–µ üíä - <b>{enemy_pokemon.hp}</b>\n' \
            f'–ê—Ç–∞–∫–∞ ‚öî - <b>{enemy_pokemon.attack}</b>\n' \
            f'–ó–∞—â–∏—Ç–∞ üõ° - <b>{enemy_pokemon.defense}</b>'
    return text


# def take_pokemon(pokemon, id):
#     """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ü–æ–∫–µ–º–æ–Ω–∞ –∏ –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –º–µ–Ω—å—à–µ 10 –ø–æ–∫–µ–º–æ–Ω–æ–≤
#     –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–∫–µ–º–æ–Ω–∞ –∏–≥—Ä–æ–∫—É, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False"""
#
#     with sqlite3.connect('Pokemon.db') as base:
#         cur = base.cursor()
#         s: list = cur.execute(f'SELECT pokemons FROM Users WHERE id = {id}').fetchone()[0].split()
#         if len(s) < 10:
#             s.append(pokemon)
#             cur.execute("UPDATE Users SET pokemons = '{}' WHERE id = {}".format(' '.join(s), id))
#             base.commit()
#             return True
#         return False


def evolution_pokemon(pokemon, id):
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        level = cur.execute(f'SELECT Level FROM Pokemons WHERE Name = "{pokemon}"').fetchone()[0]
        if level == 0:
            return level
        p = [i[0] for i in cur.execute('SELECT Name FROM Pokemons GROUP BY –≠–≤–æ–ª—é—Ü–∏—è HAVING max(Level)').fetchall()]
        if pokemon in p:
            return 'max'
        stone = cur.execute(f'SELECT evolution_stone FROM Users WHERE id = {id}').fetchone()[0]
        if stone > 0:
            if pokemon == '–ò–≤–∏':
                ev_pokemon = random.choice(cur.execute(f'SELECT Name FROM Pokemons WHERE –≠–≤–æ–ª—é—Ü–∏—è IN '
                                     f'(SELECT –≠–≤–æ–ª—é—Ü–∏—è FROM Pokemons WHERE Name = "{pokemon}") '
                                     f'AND Level = {level}+1').fetchall())[0]
            else:
                ev_pokemon = cur.execute(f'SELECT Name FROM Pokemons WHERE –≠–≤–æ–ª—é—Ü–∏—è IN '
                                     f'(SELECT –≠–≤–æ–ª—é—Ü–∏—è FROM Pokemons WHERE Name = "{pokemon}") '
                                     f'AND Level = {level}+1').fetchone()[0]
            user_pok: str = cur.execute(f'SELECT pokemons FROM Users WHERE id = {id}').fetchone()[0]
            user_pok = user_pok.replace(pokemon, ev_pokemon)
            cur.execute(f"UPDATE Users SET pokemons = '{user_pok}', evolution_stone = evolution_stone - 1"
                        f" WHERE id = {id}")
            base.commit()
            return ev_pokemon
        return False


def start_fortune(id):
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        attempts = cur.execute(f'SELECT wheel_of_Fortune FROM Users WHERE id = {id}').fetchone()[0]
        if attempts:
            wheel = ['eat', 10, 20, 50, 'evolution_stone']
            select = random.sample(wheel, counts=[10, 10, 5, 3, 2], k=1)[0]
            if select == 'eat':
                cur.execute(f"UPDATE Users SET eat = eat + 1, wheel_of_Fortune = 0 WHERE id = {id}")
            elif type(select) == int:
                cur.execute(f"UPDATE Users SET coins = coins + {select}, wheel_of_Fortune = 0 WHERE id = {id}")
            elif select == 'evolution_stone':
                cur.execute(f"UPDATE Users SET evolution_stone = evolution_stone + 1, wheel_of_Fortune = 0"
                            f" WHERE id = {id}")
            base.commit()
            return select
        return False


def buy_in_shop(product, id):
    prices = {'eat': 50, 'evolution_stone': 100}
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        coins = cur.execute(f'SELECT coins FROM Users WHERE id = {id}').fetchone()[0]
        if coins >= prices[product]:
            cur.execute(f"UPDATE Users SET {product} = {product}+1, coins = coins - {prices[product]} WHERE id = {id}")
            base.commit()
            return True
        return False


def update_icons(id, icon):
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        icons = cur.execute(f'SELECT icons FROM Users WHERE id = {id}').fetchone()[0]
        if icons:
            icons += f',{icon}'
            cur.execute(f'UPDATE Users SET icons = "{icons}", point = point+1 WHERE id = {id}')
            base.commit()
        else:
            cur.execute(f'UPDATE Users SET icons = "{icon}", point = point+1 WHERE id = {id}')
            base.commit()


def get_text_for_icons(point, text: str):
    new_text = text.split('\n')
    for i, line in enumerate(new_text[1:point], 1):
        new_text[i] = f'<s>{line}</s>'
    return '\n'.join(new_text)


def access_to_pokemon_league(user_id):
    with sqlite3.connect('Pokemon.db') as base:
        cur = base.cursor()
        if len(cur.execute(f'SELECT pokemons FROM Users WHERE id = {user_id}').fetchone()[0].split()) < 7:
            return False
        return True
